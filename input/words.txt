###############################################
# Configuration file for Bochs
###############################################

# Bochs 在运行过程中能够使用的内存，32MB
megs: 32

# 设置对应真实机器的 BIOS 和 VGA BIOS
romimage: file=/Users/xuqi/bochs/share/bochs/BIOS-bochs-latest
vgaromimage: file=/Users/xuqi/bochs/share/bochs/VGABIOS-lgpl-latest

# 设置 Bochs 所使用的磁盘，软盘关键字为 floppy
# 若只有一个软盘，则使用 floppya 即可，若有多个，则为 floppya，floppyb
#floppya: 1_44=a.img, status=inserted

# 选择启动盘符
#boot: floppy   # 默认从软盘启动
boot: disk      # 改为从硬盘启动

# 设置日志文件的输出
log: bochs.out

# 开启或关闭某些功能
# 下面是关闭鼠标，并打开键盘
mouse: enabled=0
#keyboard: keymap=/Users/xuqi/bochs/share/bochs/keymaps/x11-pc-us.map
keyboard: keymap=/Users/xuqi/bochs/share/bochs/keymaps/sdl2-pc-us.map

# 硬盘设置
ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14

# 下面是增加的 bochs 对 gdb 的支持，这样 gdb 便可以远程连接到此机器的 1234 端口调试了
#gdbstub: enabled=1, port=1234, text_base=0, data_base=0, bss_base=0

################### 配置文件结束 #####################


;主引导程序
;------------------------------------------------------------
SECTION MBR vstart=0x7c00
    mov ax,cs
    mov ds,ax
    mov es,ax
    mov ss,ax
    mov fs,ax
    mov sp,0x7c00

; 清屏利用 0x06 号功能，上卷全部行，则可清屏
; -----------------------------------------------------------
;INT Ox10 功能号: 0x06 功能描述：上卷窗口
;------------------------------------------------------
;输入:
;AH 功能号= 0x06
;AL = 上卷的行数(如果为0,表示全部)
;BH = 上卷行属性
;(CL, CH) = 窗口左上角的 (X,Y) 位置
;(DL, DH) = 窗口右下角的 (X,Y) 位置
;无返回值:
    mov ax, 0x600
    mov bx, 0x700
    mov cx, 0               ; 左上角: (0, 0)
    mov dx, 0x184f          ; 右下角: (80, 25), I
                            ; VGA 文本模式中，一行只能容纳 80 个字符，共 25 行。
                            ; 下标从 0 开始, 所以 0x18=24, 0x4f=79
    int 0x10                ; int 0x10

;;;;;;;;;    下面这三行代码获取光标位置    ;;;;;;;;;
;.get_cursor 获取当前光标位置，在光标位置处打印字符
    mov ah, 3               ; 输入: 3号子功能是获取光标位置，需要存入 ah 寄存器
    mov bh, 0               ; bh 寄存器存储的是待获取光标的页号

    int 0x10                ; 输出: ch=光标开始行，cl=光标结束行
                            ; dh＝光标所在行号 dl ＝光标所在列号

;;;;;;;;;    获取光标位置结束    ;;;;;;;;;

;;;;;;;;;    打印字符串    ;;;;;;;;;
; 还是用 10h 中断，不过这次调用 13 号子功能打印字符串
    mov ax, message
    mov bp, ax              ; es:bp 为串首地址，es 此时同 cs 一致，
                            ; 开头时已经为 sreg 初始化

    ; 光标位置要用 dx 寄存器中内容，ex 中的光标位置可忽略
    mov cx, 5               ; cx 为串长度，不包括结束符 0 的字符个数
    mov ax, 0x1301          ; 子功能号 13 显示字符及属性，要存入 ah 寄存器，
                            ; al 设置写字符方式 al=01: 显示字符串，光标跟随移动
    mov bx, 0x2             ; bh 存储要显示的页号，此处是第
                            ; bl 中是字符属性，属性黑底绿字（bl = 02h)
    int 0x10                ; 执行 BIOS 0x10 号中断
;;;;;;;;;    打印字符串结束    ;;;;;;;;;

    jmp $                   ; 使程序悬停在此

    message db "1 MBR"
    times 510-($-$$) db 0
    db 0x55,0xaa